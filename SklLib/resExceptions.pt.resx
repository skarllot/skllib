<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Obj_MustBeType" xml:space="preserve">
    <value>Objeto deve ser do tipo %var.</value>
  </data>
  <data name="FileNotFoundOn" xml:space="preserve">
    <value>Uma exceção de arquivo não encontrado ocorreu no método %var.</value>
  </data>
  <data name="InvalidChar_Value" xml:space="preserve">
    <value>O valor "%var" tem caracteres inválidos.</value>
  </data>
  <data name="InvalidArg_CompactMatch" xml:space="preserve">
    <value>Argumento Inválido, não combina com o formato compacto.</value>
  </data>
  <data name="FileExists" xml:space="preserve">
    <value>Foi especificado FileMode.CreateNew e o arquivo "%var" entretando existe.</value>
  </data>
  <data name="InvalidHeader" xml:space="preserve">
    <value>O arquivo "%var" tem um cabeçalho inválido.</value>
  </data>
  <data name="InvalidArg_StandardMatch" xml:space="preserve">
    <value>Argumento Inválido, não combina com o formato padrão.</value>
  </data>
  <data name="UnsupportedNumber_byNumberWriteInfo" xml:space="preserve">
    <value>Este número não é supportado com este NumberWriteInfo.</value>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>Uma exceção de diretório não encontrado ocorreu no método %var.</value>
  </data>
  <data name="InvalidMask" xml:space="preserve">
    <value>A propriedade Mask está sendo fixada à um valor inválido.</value>
  </data>
  <data name="SectionNotFound" xml:space="preserve">
    <value>A seção "%var" não foi encontrada.</value>
  </data>
  <data name="InvalidChar_Key" xml:space="preserve">
    <value>A chave "%var" tem caracteres inválidos.</value>
  </data>
  <data name="TooBig_Number" xml:space="preserve">
    <value>O número %var é muito grande, o valor máximo suportado é %value.</value>
  </data>
  <data name="UnsupportedCulture" xml:space="preserve">
    <value>O parâmetro name especifica uma cultura que não é suportada.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>O arquivo "%var" não foi encontrado.</value>
  </data>
  <data name="KeyNotFound" xml:space="preserve">
    <value>A chave "%var" não foi encontrado.</value>
  </data>
  <data name="Format_InvalidString" xml:space="preserve">
    <value>O parâmetro format não contém um padrão de formato personalizado válido.</value>
  </data>
  <data name="Invalid_PropNoSet" xml:space="preserve">
    <value>Operação Inválida, a propriedade %var não foi fixada.</value>
  </data>
  <data name="LessThanZero" xml:space="preserve">
    <value>%var não pode ser menor do que zero.</value>
  </data>
  <data name="InvalidChar_Section" xml:space="preserve">
    <value>A seção "%var" tem caracteres inválidos.</value>
  </data>
  <data name="TooSmall_Number" xml:space="preserve">
    <value>O número %var é muito pequeno, o valor mínimo suportado é %value.</value>
  </data>
  <data name="Unsupported_GroupSize" xml:space="preserve">
    <value>Este NumberFormatInfo tem um tamanho de grupo não suportado.</value>
  </data>
  <data name="StringMustMajorString" xml:space="preserve">
    <value>O tamanho de %var1 precisa ser maior do que o tamanho de %var2.</value>
  </data>
  <data name="ArgumentEmptyString" xml:space="preserve">
    <value>O valor de %var especificado para operação de gravação é igual à System.String.Empty ("").</value>
  </data>
  <data name="PropertyNull" xml:space="preserve">
    <value>A propriedade %var está sendo fixada à uma referência nula.</value>
  </data>
  <data name="TooBig_StringOrNumber" xml:space="preserve">
    <value>O tamanho de %var1 e/ou o valor de %var2 é muito grande.</value>
  </data>
  <data name="InvalidWrite" xml:space="preserve">
    <value>Operação Inválida, esta instância é para leitura apenas.</value>
  </data>
  <data name="InvalidFile" xml:space="preserve">
    <value>O arquivo "%var", não é um arquivo válido.</value>
  </data>
  <data name="ArgumentNull" xml:space="preserve">
    <value>%var é uma referência nula.</value>
  </data>
  <data name="NeedWin2000OrBetter" xml:space="preserve">
    <value>O método {0} só funciona no Microsoft Windows 2000 ou melhor.</value>
  </data>
  <data name="EventLogMessageEmpty" xml:space="preserve">
    <value>A mensagem de log está vazia.</value>
  </data>
</root>